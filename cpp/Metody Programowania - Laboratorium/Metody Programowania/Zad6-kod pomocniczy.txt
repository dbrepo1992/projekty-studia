#include <iostream>
#ifdef _WIN32
  #include <windows.h>
#endif // _WIN32 and _WIN64 too

using namespace std;

/*
  Wszędzie gdzie znajdziesz ???_xx poeksperymentuj  
*/


class osoba{
protected:        // Poszukaj informacji na temat tego specyfikatora dostępu
  string naz;   
  int wi;
public:
  osoba():  ...   // Resztę dopisz sam. Wszystko już umiesz.
  osoba(const string& a1, int a2): ...  //To też już znasz. 
   
  //...    
};

class pracownik : public osoba {
  string stan;
  double plac;
public:
  pracownik(): ... // Jeśli jawnie nie wywołasz konstruktora klasy osoba to i tak sam się weźmie do roboty 
                   // (pod warunkiem, że go poprawnie zdefiniowałeś/łaś ).
                   // Polami stan i placa dobrze byłoby się zająć - używając listy inicjalizacyjnej, którą doskonale znasz.
  
  pracownik(const string& a1, int a2, const string& a3, const double& a4): osoba(a1, a2), /*... tu wykorzystaj argumenty a3 i a4 do zainicjowania pól stan i placa ...*/ 
  {
    /*
       UWAGA! 
       chociaż mógłbyś zrobić to tak:
       naz = a1;
       wi  = a2;
      
       bo masz dostęp do pól chronionych klasy czy też klas, po których publicznie dziedziczysz ( class pracownik : public osoba {...}; )  

       to NIGDY TAK NIE RÓB !!!

       Jeśli poprawnie zdefiniowałeś/łaś klasę po której dziedziczysz to
       ZAWSZE używaj jej konstruktorów do inicjowania jej pól.          
    */    
  }  
  // Resztę dopisz sam. Wszystko już znasz.
};


int main(){
  #ifdef _WIN32
    SetConsoleOutputCP(CP_UTF8);
  #endif

/*
  cout << "\n#o\n";
  osoba os("Dolas", 26);
  os.pokaz();

  cout << "\np1#\n";
  const pracownik pr1("Dyzma", 35, "mistrz", 2222.0);
  cout << pr1.nazwisko() << "  " << pr1.liczba_lat()  << endl;
  cout << pr1.stanowisko() << "  " << pr1.placa() << endl;

  cout << "\n#p2\n";
  pracownik pr2(pr1);
  pr2.pokaz();

  cout << "\n#p3\n";
  pracownik pr3("Kos", 45, "kierownik", 4444.0);
  pr3.pokaz();
  cout << "#=\n";
  pr3 = pr2;
  pr3.pokaz();
  
  osoba* w = &os;
  cout <<"\n---=====***=====---\n";
  w->pokaz();

  w = &pr3;                             // Zastanów się jaki jest typ wskaźnika w
                                        // i adres jakiego obiektu przechowuje w tej chwili.   
  cout <<"\n---=====***=====---\n";
  w->pokaz();                           // Teraz zastanów się z jakiego zasięgu wywoływana jest funkcja pokaz
                                        // ???_01
                                        // Spóbuj wywołać inne metody, które zdefiniowałeś
                                        
  cout <<"---====*****====---\n";
  cout <<"---=====***=====---\n";
  static_cast<pracownik*>(w)->pokaz();  // Jeśli pierwszy raz widzisz operator static_cast < new_type > ( expression )
                                        // poczytaj na jego temat: https://en.cppreference.com/w/cpp/language/static_cast
 
                                        // Jeśli zrobiłeś eksperyment ???_01
                                        // ???_02 powtórz go jeszcze raz dokonując konwersji wskaźnika w.
cout <<"\n\n";
// */
  #ifdef _WIN32
    system("PAUSE");
  #endif
  return 0;
}